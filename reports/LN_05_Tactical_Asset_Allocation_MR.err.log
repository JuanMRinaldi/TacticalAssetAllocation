Traceback (most recent call last):
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Load Goyal's monthly data
csv_riskfactors = 'Goyal_Monthly.csv'
riskfactors = pd.read_csv(csv_riskfactors).dropna(subset=['yyyymm'])

# Split yyyymm, drop column, reorder
riskfactors['yyyymm'] = riskfactors['yyyymm'].astype(int)
riskfactors['year'], riskfactors['month'] = riskfactors['yyyymm'] // 100, riskfactors['yyyymm'] % 100
riskfactors = riskfactors.drop(columns=['yyyymm']).loc[:, ['year', 'month'] + [col for col in riskfactors.columns if col not in ['year', 'month']]]

# Filter years, clean Index
riskfactors = riskfactors[riskfactors['year'] >= 1941]
riskfactors['Index'] = riskfactors['Index'].str.replace(',', '').astype(float)

# Set index, adjust scales
riskfactors['date'] = pd.to_datetime(riskfactors.assign(day=1)[['year', 'month', 'day']])
riskfactors = riskfactors.set_index('date')
riskfactors['Rf'] = 1 + riskfactors['Rfree']

# Calculate returns
riskfactors['Sp_log'] = np.log(riskfactors['Index'] + riskfactors['D12'])
riskfactors[['Sp_log_lag', 'Rm']] = riskfactors['Sp_log'].shift(1), riskfactors['Sp_log'].diff()
riskfactors['mktrf'] = riskfactors['Rm'] - np.log(riskfactors['Rf'])

# Compute ratios
riskfactors['dp'] = riskfactors['D12'] / riskfactors['Index'] * 100
riskfactors['dy'] = np.log(riskfactors['D12']) - np.log(riskfactors['Sp_log'].shift(1))
riskfactors['ep'] = np.log(riskfactors['E12']) - np.log(riskfactors['Index'])
riskfactors.dropna(subset=['mktrf', 'dy', 'ep', 'dp'], inplace=True)

# Calculate term and def
riskfactors['term'], riskfactors['def'] = (riskfactors['AAA'] - riskfactors['tbl']) * 100, (riskfactors['BAA'] - riskfactors['AAA']) * 100
riskfactors.rename(columns={'tbl': 'tb30'}, inplace=True)
riskfactors.drop(columns=['tbl'], inplace=True)

# FRED data
industrial_production = pdr.get_data_fred('INDPRO', start=datetime(1941, 1, 1)).resample('M').last().pct_change(12).dropna().rename(columns={'INDPRO': 'ypl'})
real_gdp = pdr.get_data_fred('GDPC1', start=datetime(1941, 1, 1)).resample('M').last().pct_change(12).dropna().rename(columns={'GDPC1': 'realgnpg'})

# WRDS data
conn = wrds.Connection()  # Connect to WRDS
crsp_query = """
SELECT a.permno, a.permco, a.date, b.shrcd, b.exchcd, CAST(a.ret AS FLOAT) AS ret, a.vol, a.shrout, ABS(a.prc) AS prc, a.hexcd, a.hsiccd, CAST(d.dlret AS FLOAT) AS dlret, d.dlstdt
FROM crsp.msf AS a
LEFT JOIN crsp.msenames AS b ON a.permno=b.permno AND b.namedt<=a.date AND a.date<=b.nameendt
LEFT JOIN crsp.msedelist AS d ON a.permno=d.permno AND a.date=d.dlstdt
WHERE a.date >= '1941-01-01' AND b.shrcd IN (10, 11)
"""
crsp = conn.raw_sql(crsp_query, date_cols=['date', 'dlstdt'])
crsp['jdate'] = pd.to_datetime(crsp['date']).dt.to_period('M').dt.to_timestamp('M')
crsp['dljdate'] = pd.to_datetime(crsp['dlstdt']).dt.to_period('M').dt.to_timestamp('M') if 'dlstdt' in crsp else None

# Adjust returns and calculate market equity
crsp['ret_final'] = np.where(crsp['ret'].isna() & crsp['dlret'].notna(), crsp['dlret'], crsp['ret']).fillna(-1)
crsp['prc'] = np.where(crsp['ret_final'] == -1, 0, crsp['prc'])
crsp['me'] = crsp['prc'] * crsp['shrout']
crsp.drop(['dlret', 'dlstdt', 'prc', 'shrout', 'ret', 'date'], axis=1, inplace=True)
crsp.sort_values(by=['jdate', 'permco', 'me'], inplace=True)
crsp.reset_index(drop=True, inplace=True)

# Calculate returns
vwretx = crsp.groupby('jdate').apply(lambda df: (df['ret_final'] * df['me']).sum() / df['me'].sum())
ewretx = crsp.groupby('jdate')['ret_final'].mean()
returns_df = pd.DataFrame({'DATE': vwretx.index, 'vwretx': vwretx.values, 'ewretx': ewretx.values}).set_index('DATE')
returns_df.index = returns_df.index.to_period('M').to_timestamp('M')

# Merge dataframes
df = returns_df.merge(real_gdp, how='left', left_index=True, right_index=True).merge(industrial_production, how='left', left_index=True, right_index=True)
df.index = df.index + MonthEnd(1)
df.index.name = 'date'
riskfactors.index = riskfactors.index + MonthEnd(1)
merged_df = pd.merge(df, riskfactors, left_index=True, right_index=True, how='outer')
riskfactors = merged_df[['dp', 'def', 'term', 'ypl', 'tb30', 'CRSP_SPvwx', 'realgnpg', 'mktrf', 'Rfree', 'AAA', 'BAA', 'vwretx', 'ewretx']]
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[28], line 3[0m
[1;32m      1[0m [38;5;66;03m# Load Goyal's monthly data[39;00m
[1;32m      2[0m csv_riskfactors [38;5;241m=[39m [38;5;124m'[39m[38;5;124mGoyal_Monthly.csv[39m[38;5;124m'[39m
[0;32m----> 3[0m riskfactors [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mread_csv[49m[43m([49m[43mcsv_riskfactors[49m[43m)[49m[38;5;241m.[39mdropna(subset[38;5;241m=[39m[[38;5;124m'[39m[38;5;124myyyymm[39m[38;5;124m'[39m])
[1;32m      5[0m [38;5;66;03m# Split yyyymm, drop column, reorder[39;00m
[1;32m      6[0m riskfactors[[38;5;124m'[39m[38;5;124myyyymm[39m[38;5;124m'[39m] [38;5;241m=[39m riskfactors[[38;5;124m'[39m[38;5;124myyyymm[39m[38;5;124m'[39m][38;5;241m.[39mastype([38;5;28mint[39m)

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:211[0m, in [0;36mdeprecate_kwarg.<locals>._deprecate_kwarg.<locals>.wrapper[0;34m(*args, **kwargs)[0m
[1;32m    209[0m     [38;5;28;01melse[39;00m:
[1;32m    210[0m         kwargs[new_arg_name] [38;5;241m=[39m new_arg_value
[0;32m--> 211[0m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:331[0m, in [0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper[0;34m(*args, **kwargs)[0m
[1;32m    325[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(args) [38;5;241m>[39m num_allow_args:
[1;32m    326[0m     warnings[38;5;241m.[39mwarn(
[1;32m    327[0m         msg[38;5;241m.[39mformat(arguments[38;5;241m=[39m_format_argument_list(allow_args)),
[1;32m    328[0m         [38;5;167;01mFutureWarning[39;00m,
[1;32m    329[0m         stacklevel[38;5;241m=[39mfind_stack_level(),
[1;32m    330[0m     )
[0;32m--> 331[0m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:950[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)[0m
[1;32m    935[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m    936[0m     dialect,
[1;32m    937[0m     delimiter,
[0;32m   (...)[0m
[1;32m    946[0m     defaults[38;5;241m=[39m{[38;5;124m"[39m[38;5;124mdelimiter[39m[38;5;124m"[39m: [38;5;124m"[39m[38;5;124m,[39m[38;5;124m"[39m},
[1;32m    947[0m )
[1;32m    948[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m--> 950[0m [38;5;28;01mreturn[39;00m [43m_read[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43mkwds[49m[43m)[49m

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:605[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    602[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    604[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 605[0m parser [38;5;241m=[39m [43mTextFileReader[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m    607[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    608[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:1442[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1439[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1441[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1442[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_engine[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mengine[49m[43m)[49m

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:1735[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1733[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1734[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1735[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m [43mget_handle[49m[43m([49m
[1;32m   1736[0m [43m    [49m[43mf[49m[43m,[49m
[1;32m   1737[0m [43m    [49m[43mmode[49m[43m,[49m
[1;32m   1738[0m [43m    [49m[43mencoding[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1739[0m [43m    [49m[43mcompression[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mcompression[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1740[0m [43m    [49m[43mmemory_map[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mmemory_map[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m,[49m
[1;32m   1741[0m [43m    [49m[43mis_text[49m[38;5;241;43m=[39;49m[43mis_text[49m[43m,[49m
[1;32m   1742[0m [43m    [49m[43merrors[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding_errors[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mstrict[39;49m[38;5;124;43m"[39;49m[43m)[49m[43m,[49m
[1;32m   1743[0m [43m    [49m[43mstorage_options[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mstorage_options[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1744[0m [43m[49m[43m)[49m
[1;32m   1745[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1746[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/io/common.py:856[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    851[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    852[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    853[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    854[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    855[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 856[0m         handle [38;5;241m=[39m [38;5;28;43mopen[39;49m[43m([49m
[1;32m    857[0m [43m            [49m[43mhandle[49m[43m,[49m
[1;32m    858[0m [43m            [49m[43mioargs[49m[38;5;241;43m.[39;49m[43mmode[49m[43m,[49m
[1;32m    859[0m [43m            [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mioargs[49m[38;5;241;43m.[39;49m[43mencoding[49m[43m,[49m
[1;32m    860[0m [43m            [49m[43merrors[49m[38;5;241;43m=[39;49m[43merrors[49m[43m,[49m
[1;32m    861[0m [43m            [49m[43mnewline[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    862[0m [43m        [49m[43m)[49m
[1;32m    863[0m     [38;5;28;01melse[39;00m:
[1;32m    864[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    865[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'Goyal_Monthly.csv'
FileNotFoundError: [Errno 2] No such file or directory: 'Goyal_Monthly.csv'

