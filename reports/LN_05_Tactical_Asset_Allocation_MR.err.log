Traceback (most recent call last):
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/martinrinaldi/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
assets = {
    'Corp': (riskfactors_filtered['corpr']-riskfactors_filtered['tb30'])*12,
    'VW': (riskfactors_filtered['vwretx']-riskfactors_filtered['tb30'])*12,
    'EW': (riskfactors_filtered['ewretx']-riskfactors_filtered['tb30'])*12,
}

def plot_predictive_regression(X, assets, predictors, training_period, testing_period, periods):
    """
    Generate plots illustrating the in-sample and out-of-sample predictive regression R^2 values
    for each asset.

    Args:
        X (pd.DataFrame): DataFrame containing predictor variables.
        assets (dict): Dictionary with keys as asset names and values as pd.Series of asset returns.
        predictors (list): List of predictor column names to include in the regression.
        training_period (tuple): Start and end years for the training period.
        testing_period (tuple): Start and end years for the testing period.
        periods (dict): Dictionary specifying the periods for regression.
    """
    training_start, training_end = training_period
    testing_start, testing_end = testing_period

    for asset_name, Y in assets.items():
        Y_train = Y[training_start:training_end]
        Y_test = Y[testing_start:testing_end]
        X_train = X[training_start:training_end]
        X_test = X[testing_start:testing_end]

        # Running predictive regression for the training period
        train_results = predictive_regression(X_train, Y_train, predictors, periods)
        test_results = predictive_regression(X_test, Y_test, predictors, periods)

        # Assuming the focus is on annual ('Y') predictions for simplicity in visualization
        r2_train = train_results[train_results['Interval'] == 'Y']['R^2'].mean()
        r2_test = test_results[test_results['Interval'] == 'Y']['R^2'].mean()

        plt.figure(figsize=(10, 6))
        plt.bar(['In-Sample (1941-1971)', 'Out-of-Sample (1972-1987)'], [r2_train, r2_test], color=['skyblue', 'salmon'])
        plt.title(f'{asset_name} - Predictive Regression R^2 Comparison')
        plt.ylabel('Average R^2 Value')
        plt.ylim(0, 1)  # Assuming R^2 values are normalized
        plt.show()

# Define the training and testing periods
training_period = ('1941', '1971')
testing_period = ('1972', '1987')

# Execute the plotting function
plot_predictive_regression(X, assets, predictors, training_period, testing_period, periods)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[19], line 49[0m
[1;32m     46[0m testing_period [38;5;241m=[39m ([38;5;124m'[39m[38;5;124m1972[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m1987[39m[38;5;124m'[39m)
[1;32m     48[0m [38;5;66;03m# Execute the plotting function[39;00m
[0;32m---> 49[0m [43mplot_predictive_regression[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43massets[49m[43m,[49m[43m [49m[43mpredictors[49m[43m,[49m[43m [49m[43mtraining_period[49m[43m,[49m[43m [49m[43mtesting_period[49m[43m,[49m[43m [49m[43mperiods[49m[43m)[49m

Cell [0;32mIn[19], line 30[0m, in [0;36mplot_predictive_regression[0;34m(X, assets, predictors, training_period, testing_period, periods)[0m
[1;32m     27[0m X_test [38;5;241m=[39m X[testing_start:testing_end]
[1;32m     29[0m [38;5;66;03m# Running predictive regression for the training period[39;00m
[0;32m---> 30[0m train_results [38;5;241m=[39m [43mpredictive_regression[49m[43m([49m[43mX_train[49m[43m,[49m[43m [49m[43mY_train[49m[43m,[49m[43m [49m[43mpredictors[49m[43m,[49m[43m [49m[43mperiods[49m[43m)[49m
[1;32m     31[0m test_results [38;5;241m=[39m predictive_regression(X_test, Y_test, predictors, periods)
[1;32m     33[0m [38;5;66;03m# Assuming the focus is on annual ('Y') predictions for simplicity in visualization[39;00m

Cell [0;32mIn[16], line 28[0m, in [0;36mpredictive_regression[0;34m(X, Y, predictors, periods)[0m
[1;32m     15[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m     16[0m [38;5;124;03mRun predictive regressions and return a DataFrame containing regression results including R^2.[39;00m
[1;32m     17[0m 
[0;32m   (...)[0m
[1;32m     25[0m [38;5;124;03m    pd.DataFrame: DataFrame containing regression results with R^2 for each model and predictive horizon.[39;00m
[1;32m     26[0m [38;5;124;03m"""[39;00m
[1;32m     27[0m results [38;5;241m=[39m []
[0;32m---> 28[0m X_lagged [38;5;241m=[39m [43mX[49m[43m[[49m[43mpredictors[49m[43m][49m[38;5;241m.[39mshift([38;5;241m1[39m)  [38;5;66;03m# Lagging predictors by one period for predictability[39;00m
[1;32m     30[0m [38;5;28;01mfor[39;00m period_name, shift [38;5;129;01min[39;00m periods[38;5;241m.[39mitems():
[1;32m     31[0m     [38;5;66;03m# Prepare Y based on the period[39;00m
[1;32m     32[0m     Y_shifted [38;5;241m=[39m Y[38;5;241m.[39mshift([38;5;241m-[39mshift)

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py:3813[0m, in [0;36mDataFrame.__getitem__[0;34m(self, key)[0m
[1;32m   3811[0m     [38;5;28;01mif[39;00m is_iterator(key):
[1;32m   3812[0m         key [38;5;241m=[39m [38;5;28mlist[39m(key)
[0;32m-> 3813[0m     indexer [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcolumns[49m[38;5;241;43m.[39;49m[43m_get_indexer_strict[49m[43m([49m[43mkey[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mcolumns[39;49m[38;5;124;43m"[39;49m[43m)[49m[[38;5;241m1[39m]
[1;32m   3815[0m [38;5;66;03m# take() does not accept boolean indexers[39;00m
[1;32m   3816[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(indexer, [38;5;124m"[39m[38;5;124mdtype[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m) [38;5;241m==[39m [38;5;28mbool[39m:

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:6070[0m, in [0;36mIndex._get_indexer_strict[0;34m(self, key, axis_name)[0m
[1;32m   6067[0m [38;5;28;01melse[39;00m:
[1;32m   6068[0m     keyarr, indexer, new_indexer [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_reindex_non_unique(keyarr)
[0;32m-> 6070[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_raise_if_missing[49m[43m([49m[43mkeyarr[49m[43m,[49m[43m [49m[43mindexer[49m[43m,[49m[43m [49m[43maxis_name[49m[43m)[49m
[1;32m   6072[0m keyarr [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mtake(indexer)
[1;32m   6073[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(key, Index):
[1;32m   6074[0m     [38;5;66;03m# GH 42790 - Preserve name from an Index[39;00m

File [0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:6133[0m, in [0;36mIndex._raise_if_missing[0;34m(self, key, indexer, axis_name)[0m
[1;32m   6130[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mNone of [[39m[38;5;132;01m{[39;00mkey[38;5;132;01m}[39;00m[38;5;124m] are in the [[39m[38;5;132;01m{[39;00maxis_name[38;5;132;01m}[39;00m[38;5;124m][39m[38;5;124m"[39m)
[1;32m   6132[0m not_found [38;5;241m=[39m [38;5;28mlist[39m(ensure_index(key)[missing_mask[38;5;241m.[39mnonzero()[[38;5;241m0[39m]][38;5;241m.[39munique())
[0;32m-> 6133[0m [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mnot_found[38;5;132;01m}[39;00m[38;5;124m not in index[39m[38;5;124m"[39m)

[0;31mKeyError[0m: "['dp'] not in index"
KeyError: "['dp'] not in index"

